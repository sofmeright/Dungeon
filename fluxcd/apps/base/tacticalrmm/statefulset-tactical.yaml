apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: tactical
spec:
  serviceName: tactical
  replicas: 1
  selector:
    matchLabels:
      app: tactical
  template:
    metadata:
      labels:
        app: tactical
    spec:
      initContainers:
      # Wait for external dependencies only
      - name: wait-for-postgres
        image: PLACEHOLDER_BUSYBOX_IMAGE
        command:
        - sh
        - -c
        - |
          until nc -z tactical-postgres 5432; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
      - name: wait-for-redis
        image: PLACEHOLDER_BUSYBOX_IMAGE
        command:
        - sh
        - -c
        - |
          until nc -z tactical-redis 6379; do
            echo "Waiting for Redis..."
            sleep 2
          done
      - name: wait-for-mongodb
        image: PLACEHOLDER_BUSYBOX_IMAGE
        command:
        - sh
        - -c
        - |
          until nc -z tactical-mongodb 27017; do
            echo "Waiting for MongoDB..."
            sleep 2
          done
      containers:
      # MeshCentral - starts first, depends on mongodb
      - name: meshcentral
        image: PLACEHOLDER_MESHCENTRAL_IMAGE
        ports:
        - containerPort: 4430
          name: meshcentral
        startupProbe:
          tcpSocket:
            port: 4430
          initialDelaySeconds: 10
          periodSeconds: 5
          failureThreshold: 60
        readinessProbe:
          tcpSocket:
            port: 4430
          periodSeconds: 5
        env:
        - name: MESH_USER
          value: "tactical"
        - name: MESH_PASS
          valueFrom:
            secretKeyRef:
              name: tacticalrmm-secrets
              key: MESH_PASSWORD
        - name: MONGODB_USER
          value: "tactical"
        - name: MONGODB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: tacticalrmm-secrets
              key: MONGODB_PASSWORD
        - name: MONGODB_HOST
          value: "tactical-mongodb"
        - name: MONGODB_PORT
          value: "27017"
        - name: MESH_PERSISTENT_CONFIG
          value: "1"
        volumeMounts:
        - name: meshcentral-data
          mountPath: /home/node/app/meshcentral-data
        - name: tactical-data
          mountPath: /opt/tactical
      # Tactical-init - runs after meshcentral is ready, sets up initial config
      - name: tactical-init
        image: PLACEHOLDER_TACTICAL_IMAGE
        args: ["tactical-init"]
        volumeMounts:
        - name: tactical-data
          mountPath: /opt/tactical
        - name: meshcentral-data
          mountPath: /home/node/app/meshcentral-data
        env:
        - name: POSTGRES_HOST
          value: "tactical-postgres"
        - name: POSTGRES_PORT
          value: "5432"
        - name: POSTGRES_DB
          value: "tacticalrmm"
        - name: POSTGRES_USER
          value: "tactical"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: tacticalrmm-secrets
              key: POSTGRES_PASSWORD
        - name: REDIS_HOST
          value: "tactical-redis"
        - name: APP_HOST
          valueFrom:
            secretKeyRef:
              name: tacticalrmm-secrets
              key: APP_HOST
        - name: API_HOST
          valueFrom:
            secretKeyRef:
              name: tacticalrmm-secrets
              key: API_HOST
        - name: MESH_HOST
          valueFrom:
            secretKeyRef:
              name: tacticalrmm-secrets
              key: MESH_HOST
        - name: MESH_USER
          value: "tactical"
        - name: MESH_PASS
          valueFrom:
            secretKeyRef:
              name: tacticalrmm-secrets
              key: MESH_PASSWORD
        - name: DJANGO_SEKRET
          valueFrom:
            secretKeyRef:
              name: tacticalrmm-secrets
              key: DJANGO_SECRET_KEY
      # NATS
      - name: nats
        image: PLACEHOLDER_NATS_IMAGE
        args: ["-c", "/nats.conf"]
        ports:
        - containerPort: 4222
          name: nats
      # Backend
      - name: backend
        image: PLACEHOLDER_TACTICAL_IMAGE
        args: ["tactical-backend"]
        ports:
        - containerPort: 8000
          name: backend
        env:
        - name: POSTGRES_HOST
          value: "tactical-postgres"
        - name: POSTGRES_PORT
          value: "5432"
        - name: POSTGRES_DB
          value: "tacticalrmm"
        - name: POSTGRES_USER
          value: "tactical"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: tacticalrmm-secrets
              key: POSTGRES_PASSWORD
        - name: REDIS_HOST
          value: "tactical-redis"
        - name: DJANGO_SEKRET
          valueFrom:
            secretKeyRef:
              name: tacticalrmm-secrets
              key: DJANGO_SECRET_KEY
        volumeMounts:
        - name: tactical-data
          mountPath: /opt/tactical
      # Websockets
      - name: websockets
        image: PLACEHOLDER_TACTICAL_IMAGE
        args: ["tactical-websockets"]
        ports:
        - containerPort: 8001
          name: websockets
        env:
        - name: POSTGRES_HOST
          value: "tactical-postgres"
        - name: POSTGRES_PORT
          value: "5432"
        - name: POSTGRES_DB
          value: "tacticalrmm"
        - name: POSTGRES_USER
          value: "tactical"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: tacticalrmm-secrets
              key: POSTGRES_PASSWORD
        - name: REDIS_HOST
          value: "tactical-redis"
        - name: DJANGO_SEKRET
          valueFrom:
            secretKeyRef:
              name: tacticalrmm-secrets
              key: DJANGO_SECRET_KEY
        volumeMounts:
        - name: tactical-data
          mountPath: /opt/tactical
      # Celery
      - name: celery
        image: PLACEHOLDER_TACTICAL_IMAGE
        args: ["tactical-celery"]
        env:
        - name: POSTGRES_HOST
          value: "tactical-postgres"
        - name: POSTGRES_PORT
          value: "5432"
        - name: POSTGRES_DB
          value: "tacticalrmm"
        - name: POSTGRES_USER
          value: "tactical"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: tacticalrmm-secrets
              key: POSTGRES_PASSWORD
        - name: REDIS_HOST
          value: "tactical-redis"
        - name: DJANGO_SEKRET
          valueFrom:
            secretKeyRef:
              name: tacticalrmm-secrets
              key: DJANGO_SECRET_KEY
        volumeMounts:
        - name: tactical-data
          mountPath: /opt/tactical
      # Celerybeat
      - name: celerybeat
        image: PLACEHOLDER_TACTICAL_IMAGE
        args: ["tactical-celerybeat"]
        env:
        - name: POSTGRES_HOST
          value: "tactical-postgres"
        - name: POSTGRES_PORT
          value: "5432"
        - name: POSTGRES_DB
          value: "tacticalrmm"
        - name: POSTGRES_USER
          value: "tactical"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: tacticalrmm-secrets
              key: POSTGRES_PASSWORD
        - name: REDIS_HOST
          value: "tactical-redis"
        - name: DJANGO_SEKRET
          valueFrom:
            secretKeyRef:
              name: tacticalrmm-secrets
              key: DJANGO_SECRET_KEY
        volumeMounts:
        - name: tactical-data
          mountPath: /opt/tactical
      # Frontend
      - name: frontend
        image: PLACEHOLDER_FRONTEND_IMAGE
        ports:
        - containerPort: 8080
          name: frontend
      # Nginx
      - name: nginx
        image: PLACEHOLDER_NGINX_IMAGE
        ports:
        - containerPort: 80
          name: http
        - containerPort: 443
          name: https
        env:
        - name: APP_HOST
          valueFrom:
            secretKeyRef:
              name: tacticalrmm-secrets
              key: APP_HOST
        - name: API_HOST
          valueFrom:
            secretKeyRef:
              name: tacticalrmm-secrets
              key: API_HOST
        - name: MESH_HOST
          valueFrom:
            secretKeyRef:
              name: tacticalrmm-secrets
              key: MESH_HOST
  volumeClaimTemplates:
  - metadata:
      name: tactical-data
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: PLACEHOLDER_STORAGE_CLASS
      resources:
        requests:
          storage: PLACEHOLDER_STORAGE_SIZE
  - metadata:
      name: meshcentral-data
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: PLACEHOLDER_STORAGE_CLASS
      resources:
        requests:
          storage: PLACEHOLDER_STORAGE_SIZE
