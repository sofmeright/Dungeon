apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: qbittorrent
spec:
  replicas: 1
  template:
    spec:
      initContainers:
      - name: webui-config
        image: docker.jcr.pcfae.com/python:3.11-alpine
        env:
        - name: QBITTORRENT_USERNAME
          valueFrom:
            secretKeyRef:
              name: qbittorrent-secrets
              key: qbittorrent_user
        - name: QBITTORRENT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: qbittorrent-secrets
              key: qbittorrent_pass
        command:
        - sh
        - -c
        - |
          # Install passlib for PBKDF2 password hashing
          pip install passlib --quiet 2>&1 | grep -v "WARNING" | grep -v "Requirement"

          # Create qBittorrent config directory if needed
          mkdir -p /config/qBittorrent

          # Generate PBKDF2 hash for the password
          HASH=$(python3 -c "from passlib.hash import pbkdf2_sha256; print(pbkdf2_sha256.using(rounds=100000).hash('$QBITTORRENT_PASSWORD'))")

          CONFIG_FILE="/config/qBittorrent/qBittorrent.conf"

          if [ -f "$CONFIG_FILE" ]; then
            # Existing config: check if credentials already exist
            if grep -q "^WebUI\\\\Username=" "$CONFIG_FILE"; then
              echo "WebUI credentials already configured in existing config"
            else
              # Add credentials to existing [Preferences] section
              echo "Adding WebUI credentials to existing config"
              # Use sed to add lines after WebUI\ServerDomains line or at end of [Preferences]
              if grep -q "^WebUI\\\\ServerDomains=" "$CONFIG_FILE"; then
                sed -i "/^WebUI\\\\ServerDomains=/a WebUI\\\\Username=$QBITTORRENT_USERNAME" "$CONFIG_FILE"
                sed -i "/^WebUI\\\\Username=/a WebUI\\\\Password_PBKDF2=\\\"@ByteArray($HASH)\\\"" "$CONFIG_FILE"
              else
                # Fallback: append to [Preferences] section
                sed -i "/^\[Preferences\]/a WebUI\\\\Username=$QBITTORRENT_USERNAME" "$CONFIG_FILE"
                sed -i "/^WebUI\\\\Username=/a WebUI\\\\Password_PBKDF2=\\\"@ByteArray($HASH)\\\"" "$CONFIG_FILE"
              fi
            fi
          else
            # Fresh install: create minimal config with standard ordering
            echo "Creating fresh qBittorrent config with credentials"
            cat > "$CONFIG_FILE" <<EOF
          [Preferences]
          Connection\PortRangeMin=6881
          Connection\UPnP=false
          Downloads\SavePath=/downloads/
          Downloads\TempPath=/downloads/incomplete/
          WebUI\Address=*
          WebUI\Port=6887
          WebUI\ServerDomains=*
          WebUI\Username=$QBITTORRENT_USERNAME
          WebUI\Password_PBKDF2="@ByteArray($HASH)"
          EOF
          fi

          # Set ownership to match qbittorrent container user
          chown -R 1000:1000 /config/qBittorrent
          echo "qBittorrent WebUI credentials configured successfully"
        volumeMounts:
        - name: swift-sail-qbittorrent-config
          mountPath: /config
      containers:
      - name: gluetun
        image: docker.jcr.pcfae.com/qmcgaw/gluetun:latest
        securityContext:
          privileged: true
        env:
        - name: VPN_SERVICE_PROVIDER
          value: "private internet access"
        - name: SERVER_REGIONS
          value: "CA Vancouver"
        - name: PORT_FORWARD_ONLY
          value: "true"
        - name: VPN_PORT_FORWARDING
          value: "on"
        - name: VPN_PORT_FORWARDING_STATUS_FILE
          value: "/tmp/gluetun/forwarded_port"
        - name: DNS_KEEP_NAMESERVER
          value: "off"
        - name: DOT
          value: "on"
        - name: FIREWALL_OUTBOUND_SUBNETS
          value: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
        - name: FIREWALL_INPUT_PORTS
          value: "6887"
        - name: TZ
          value: "Etc/UTC"
        - name: LOG_LEVEL
          value: "debug"
        volumeMounts:
        - name: swift-sail-qbittorrent-gluetun-config
          mountPath: /gluetun
        - name: swift-sail-qbittorrent-gluetun-tmp
          mountPath: /tmp/gluetun
      - name: qbittorrent
        image: lscr.io/linuxserver/qbittorrent:latest
        env:
        - name: TZ
          value: "Etc/UTC"
        volumeMounts:
        - name: swift-sail-qbittorrent-config
          mountPath: /config
        - name: swift-sail-qbittorrent-downloads
          mountPath: /downloads
      - name: port-manager
        image: docker.jcr.pcfae.com/prplanit/qbittorrent-port-manager:1.3
        volumeMounts:
        - name: swift-sail-qbittorrent-gluetun-tmp
          mountPath: /tmp/gluetun
  volumeClaimTemplates:
  - metadata:
      name: swift-sail-qbittorrent-gluetun-config
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: ceph-rbd-retain
      resources:
        requests:
          storage: 1Gi
  - metadata:
      name: swift-sail-qbittorrent-config
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: ceph-rbd-retain
      resources:
        requests:
          storage: 5Gi
  - metadata:
      name: swift-sail-qbittorrent-downloads
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: ceph-rbd-retain
      resources:
        requests:
          storage: 500Gi
  - metadata:
      name: swift-sail-qbittorrent-gluetun-tmp
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: ceph-rbd-retain
      resources:
        requests:
          storage: 20Mi
