apiVersion: apps/v1
kind: Deployment
metadata:
  name: appflowy-gotrue
spec:
  replicas: 3
  template:
    spec:
      initContainers:
      - name: init-auth-schema
        image: docker.jcr.pcfae.com/library/postgres:17
        command:
        - sh
        - -c
        - |
          # Run AppFlowy's supabase_auth.sh initialization (adapted for our env)
          psql "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@appflowy-postgres-rw:5432/appflowy" <<-'EOSQL1'
            -- Create supabase_auth_admin user if it does not exist
            DO $$ BEGIN
              IF NOT EXISTS (
                SELECT FROM pg_catalog.pg_roles WHERE rolname = 'supabase_auth_admin'
              ) THEN
                CREATE USER supabase_auth_admin
                  BYPASSRLS NOINHERIT CREATEROLE LOGIN NOREPLICATION
                  PASSWORD '${SUPABASE_PASSWORD}';
              END IF;
            END $$;

            -- Create auth schema owned by supabase_auth_admin
            CREATE SCHEMA IF NOT EXISTS auth AUTHORIZATION supabase_auth_admin;

            -- Grant permissions
            GRANT CREATE ON DATABASE appflowy TO supabase_auth_admin;

            -- Set search_path for supabase_auth_admin
            ALTER USER supabase_auth_admin SET search_path = 'auth';
          EOSQL1

          # Now run the base auth schema initialization as supabase_auth_admin
          psql "postgres://supabase_auth_admin:${SUPABASE_PASSWORD}@appflowy-postgres-rw:5432/appflowy" <<-'EOSQL2'
            -- auth.users definition
            CREATE TABLE IF NOT EXISTS auth.users (
              instance_id uuid NULL,
              id uuid NOT NULL UNIQUE,
              aud varchar(255) NULL,
              "role" varchar(255) NULL,
              email varchar(255) NULL UNIQUE,
              encrypted_password varchar(255) NULL,
              confirmed_at timestamptz NULL,
              invited_at timestamptz NULL,
              confirmation_token varchar(255) NULL,
              confirmation_sent_at timestamptz NULL,
              recovery_token varchar(255) NULL,
              recovery_sent_at timestamptz NULL,
              email_change_token varchar(255) NULL,
              email_change varchar(255) NULL,
              email_change_sent_at timestamptz NULL,
              last_sign_in_at timestamptz NULL,
              raw_app_meta_data jsonb NULL,
              raw_user_meta_data jsonb NULL,
              is_super_admin bool NULL,
              created_at timestamptz NULL,
              updated_at timestamptz NULL,
              CONSTRAINT users_pkey PRIMARY KEY (id)
            );
            CREATE INDEX IF NOT EXISTS users_instance_id_email_idx ON auth.users USING btree (instance_id, email);
            CREATE INDEX IF NOT EXISTS users_instance_id_idx ON auth.users USING btree (instance_id);

            -- auth.refresh_tokens definition
            CREATE TABLE IF NOT EXISTS auth.refresh_tokens (
              instance_id uuid NULL,
              id bigserial NOT NULL,
              "token" varchar(255) NULL,
              user_id varchar(255) NULL,
              revoked bool NULL,
              created_at timestamptz NULL,
              updated_at timestamptz NULL,
              CONSTRAINT refresh_tokens_pkey PRIMARY KEY (id)
            );
            CREATE INDEX IF NOT EXISTS refresh_tokens_instance_id_idx ON auth.refresh_tokens USING btree (instance_id);
            CREATE INDEX IF NOT EXISTS refresh_tokens_instance_id_user_id_idx ON auth.refresh_tokens USING btree (instance_id, user_id);
            CREATE INDEX IF NOT EXISTS refresh_tokens_token_idx ON auth.refresh_tokens USING btree (token);

            -- auth.instances definition
            CREATE TABLE IF NOT EXISTS auth.instances (
              id uuid NOT NULL,
              uuid uuid NULL,
              raw_base_config text NULL,
              created_at timestamptz NULL,
              updated_at timestamptz NULL,
              CONSTRAINT instances_pkey PRIMARY KEY (id)
            );

            -- auth.audit_log_entries definition
            CREATE TABLE IF NOT EXISTS auth.audit_log_entries (
              instance_id uuid NULL,
              id uuid NOT NULL,
              payload json NULL,
              created_at timestamptz NULL,
              CONSTRAINT audit_log_entries_pkey PRIMARY KEY (id)
            );
            CREATE INDEX IF NOT EXISTS audit_logs_instance_id_idx ON auth.audit_log_entries USING btree (instance_id);

            -- auth.schema_migrations definition
            CREATE TABLE IF NOT EXISTS auth.schema_migrations (
              "version" varchar(255) NOT NULL,
              CONSTRAINT schema_migrations_pkey PRIMARY KEY ("version")
            );

            -- Helper functions
            CREATE OR REPLACE FUNCTION auth.uid() RETURNS uuid AS $$
              SELECT nullif(current_setting('request.jwt.claim.sub', true), '')::uuid;
            $$ LANGUAGE sql STABLE;

            CREATE OR REPLACE FUNCTION auth.role() RETURNS text AS $$
              SELECT nullif(current_setting('request.jwt.claim.role', true), '')::text;
            $$ LANGUAGE sql STABLE;
          EOSQL2
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: appflowy-postgres-app
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: appflowy-postgres-app
              key: POSTGRES_PASSWORD
        - name: SUPABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: appflowy-postgres-app
              key: SUPABASE_PASSWORD
      containers:
      - name: gotrue
        image: docker.jcr.pcfae.com/appflowyinc/gotrue:latest
        ports:
        - name: http
          containerPort: 9999
          protocol: TCP
        env:
        # Non-secret configuration
        - name: GOTRUE_DB_DRIVER
          value: "postgres"
        - name: API_EXTERNAL_URL
          value: "https://flwy.prplanit.com/gotrue"
        - name: GOTRUE_SITE_URL
          value: "https://flwy.prplanit.com"
        - name: GOTRUE_URI_ALLOW_LIST
          value: "https://flwy.prplanit.com"
        - name: GOTRUE_DISABLE_SIGNUP
          value: "false"
        - name: GOTRUE_JWT_EXP
          value: "7200"
        - name: GOTRUE_MAILER_AUTOCONFIRM
          value: "true"
        - name: GOTRUE_MAILER_URLPATHS_CONFIRMATION
          value: "/gotrue/verify"
        - name: GOTRUE_MAILER_URLPATHS_INVITE
          value: "/gotrue/verify"
        - name: GOTRUE_MAILER_URLPATHS_RECOVERY
          value: "/gotrue/verify"
        - name: GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE
          value: "/gotrue/verify"
        - name: GOTRUE_RATE_LIMIT_EMAIL_SENT
          value: "100"
        - name: GOTRUE_SMTP_HOST
          value: "smtp.gmail.com"
        - name: GOTRUE_SMTP_PORT
          value: "465"
        - name: GOTRUE_SMTP_MAX_FREQUENCY
          value: "1ns"
        - name: GOTRUE_SMTP_ADMIN_EMAIL
          value: "precisionplanit@gmail.com"
        - name: GOTRUE_EXTERNAL_GITHUB_ENABLED
          value: "false"
        - name: GOTRUE_EXTERNAL_GOOGLE_ENABLED
          value: "false"
        - name: GOTRUE_EXTERNAL_DISCORD_ENABLED
          value: "false"
        # Secrets from Vault
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: appflowy-postgres-app
              key: DATABASE_URL
        - name: GOTRUE_DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: appflowy-postgres-app
              key: GOTRUE_DATABASE_URL
        - name: GOTRUE_JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: appflowy-postgres-app
              key: GOTRUE_JWT_SECRET
        - name: GOTRUE_ADMIN_EMAIL
          valueFrom:
            secretKeyRef:
              name: appflowy-postgres-app
              key: GOTRUE_ADMIN_EMAIL
        - name: GOTRUE_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: appflowy-postgres-app
              key: GOTRUE_ADMIN_PASSWORD
        - name: GOTRUE_SMTP_USER
          valueFrom:
            secretKeyRef:
              name: appflowy-postgres-app
              key: GOTRUE_SMTP_USER
        - name: GOTRUE_SMTP_PASS
          valueFrom:
            secretKeyRef:
              name: appflowy-postgres-app
              key: GOTRUE_SMTP_PASS
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
