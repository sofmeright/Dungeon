---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: ark-sa-tmc-admin-list-source
spec:
  refreshInterval: 30s
  secretStoreRef:
    name: vault-backend
    kind: ClusterSecretStore
  target:
    name: ark-sa-tmc-admin-list-source
    creationPolicy: Owner
  data:
  - secretKey: AdminListURL
    remoteRef:
      key: apps/ark-sa-tmc
      property: AdminListURL
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ark-sa-tmc-admin-list-njs
data:
  admin-list.js: |
    import fs from 'fs';

    function parseAdminList(text) {
      const steamIds = new Map();
      if (!text) return steamIds;

      text.split('\n').forEach(line => {
        line = line.trim();
        if (!line || line.startsWith('#')) return;

        const match = line.match(/^([0-9a-f]{32})\s*(#.*)?$/i);
        if (match) {
          const [, steamId, comment] = match;
          steamIds.set(steamId.toLowerCase(), comment || '');
        }
      });

      return steamIds;
    }

    function mergeAdminLists(lists) {
      const merged = new Map();
      lists.forEach(list => {
        list.forEach((comment, steamId) => {
          if (!merged.has(steamId)) {
            merged.set(steamId, comment);
          }
        });
      });
      return merged;
    }

    function formatAdminList(steamIds) {
      const lines = [];
      steamIds.forEach((comment, steamId) => {
        lines.push(`${steamId}${comment ? ' ' + comment : ''}`);
      });
      return lines.join('\n') + '\n';
    }

    function assembleAdminList(r) {
      try {
        const secretPath = '/vault-data';
        const files = fs.readdirSync(secretPath);

        const lists = [];

        files.forEach(file => {
          try {
            const content = fs.readFileSync(`${secretPath}/${file}`, 'utf8');
            const parsed = parseAdminList(content);
            if (parsed.size > 0) {
              lists.push(parsed);
            }
          } catch (e) {
            // Skip files that can't be read
          }
        });

        const merged = mergeAdminLists(lists);
        const output = formatAdminList(merged);

        r.headersOut['Content-Type'] = 'text/plain';
        r.return(200, output);
      } catch (error) {
        r.return(500, `Error: ${error.message}\n`);
      }
    }

    export default { assembleAdminList };
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ark-sa-tmc-admin-list-nginx-conf
data:
  nginx.conf: |
    load_module modules/ngx_http_js_module.so;

    events {
      worker_connections 1024;
    }

    http {
      js_path "/etc/nginx/njs/";
      js_import admin from admin-list.js;

      server {
        listen 80;
        server_name _;

        location /AllowedCheaterSteamIDs.txt {
          js_content admin.assembleAdminList;
        }

        location /PlayersJoinNoCheckList.txt {
          js_content admin.assembleAdminList;
        }

        location /PlayersExclusiveJoinList.txt {
          js_content admin.assembleAdminList;
        }

        location / {
          return 404 "Not Found\n";
        }
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ark-sa-tmc-admin-list-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ark-sa-tmc-admin-list-server
  template:
    metadata:
      labels:
        app: ark-sa-tmc-admin-list-server
      annotations:
        vault-data-version: "1"
    spec:
      containers:
      - name: nginx
        image: docker.jcr.pcfae.com/library/nginx:alpine
        ports:
        - containerPort: 80
          name: http
        volumeMounts:
        - name: nginx-conf
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: njs-script
          mountPath: /etc/nginx/njs
        - name: vault-data
          mountPath: /vault-data
          readOnly: true
      volumes:
      - name: nginx-conf
        configMap:
          name: ark-sa-tmc-admin-list-nginx-conf
      - name: njs-script
        configMap:
          name: ark-sa-tmc-admin-list-njs
      - name: vault-data
        secret:
          secretName: ark-sa-tmc-admin-list-source
---
apiVersion: v1
kind: Service
metadata:
  name: ark-sa-tmc-admin-list-server
  annotations:
    lbipam.cilium.io/ips: "172.22.30.231"
    lbipam.cilium.io/sharing-key: "shooting-gallery"
spec:
  type: LoadBalancer
  selector:
    app: ark-sa-tmc-admin-list-server
  ports:
  - port: 28019
    targetPort: 80
    protocol: TCP
    name: http
