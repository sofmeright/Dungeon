---
# Patch init job init container command with actual Postgres hostname
# Base already has correct 'zitadel init' command (reads ZITADEL_MASTERKEY env automatically)
apiVersion: batch/v1
kind: Job
metadata:
  name: zitadel-init
spec:
  template:
    spec:
      initContainers:
      - name: wait-for-postgres
        command:
        - sh
        - -c
        - until pg_isready -h zitadel-postgres-rw.zeldas-lullaby.svc.cluster.local -p 5432 -U postgres; do echo waiting for postgres; sleep 2; done
---
# Patch admin-sa-provision job with actual namespace
apiVersion: batch/v1
kind: Job
metadata:
  name: zitadel-admin-sa-to-vault
spec:
  template:
    spec:
      initContainers:
      - name: wait-for-secret
        command:
        - sh
        - -c
        - |
          echo "Waiting for zitadel-k8s-admin-sa secret..."
          until kubectl get secret zitadel-k8s-admin-sa -n zeldas-lullaby 2>/dev/null; do
            echo "Secret not found yet, waiting..."
            sleep 5
          done
          echo "Secret found!"
      containers:
      - name: sync-to-vault
        command:
        - sh
        - -c
        - |
          set -e
          echo "Extracting credentials from secret..."
          PAT=$(kubectl get secret zitadel-k8s-admin-sa -n zeldas-lullaby -o jsonpath='{.data.pat}' | base64 -d)

          echo "Writing credentials to Vault..."
          curl -sf -X POST \
            -H "X-Vault-Token: ${VAULT_TOKEN}" \
            -d "{\"data\":{\"pat\":\"${PAT}\"}}" \
            http://vault.zeldas-lullaby.svc.cluster.local:8200/v1/operationtimecapsule/data/zitadel/admin-sa

          echo "Credentials successfully synced to Vault!"
---
# Patch setup job sidecar containers to replace PLACEHOLDER_NAMESPACE with actual namespace
apiVersion: batch/v1
kind: Job
metadata:
  name: zitadel-setup
spec:
  template:
    spec:
      containers:
      - name: machinekey-writer
        command:
        - sh
        - -c
        - |
          echo "Waiting for setup container to terminate..."
          until [ ! -z "$(kubectl get pod ${POD_NAME} -n zeldas-lullaby -o jsonpath='{.status.containerStatuses[?(@.name=='\''zitadel-setup'\'')].state.terminated}' 2>/dev/null)" ]; do
            sleep 5
          done
          echo "Setup container terminated. Extracting sa.json..."
          kubectl create secret generic zitadel-admin-sa \
            --from-file=zitadel-admin-sa.json=/machinekey/sa.json \
            --dry-run=client -o yaml | kubectl apply -f -
          echo "Secret zitadel-admin-sa created successfully!"
      - name: machine-pat-writer
        command:
        - sh
        - -c
        - |
          echo "Waiting for setup container to terminate..."
          until [ ! -z "$(kubectl get pod ${POD_NAME} -n zeldas-lullaby -o jsonpath='{.status.containerStatuses[?(@.name=='\''zitadel-setup'\'')].state.terminated}' 2>/dev/null)" ]; do
            sleep 5
          done
          echo "Setup container terminated. Extracting PAT..."
          kubectl create secret generic zitadel-k8s-admin-sa \
            --from-file=pat=/machinekey/pat \
            --dry-run=client -o yaml | kubectl apply -f -
          echo "Secret zitadel-k8s-admin-sa created successfully!"
      - name: login-client-pat-writer
        command:
        - sh
        - -c
        - |
          echo "Waiting for setup container to terminate..."
          until [ ! -z "$(kubectl get pod ${POD_NAME} -n zeldas-lullaby -o jsonpath='{.status.containerStatuses[?(@.name=='\''zitadel-setup'\'')].state.terminated}' 2>/dev/null)" ]; do
            sleep 5
          done
          echo "Setup container terminated. Extracting login client PAT..."
          kubectl create secret generic zitadel-login-client \
            --from-file=pat=/login-client/pat \
            --dry-run=client -o yaml | kubectl apply -f -
          echo "Secret zitadel-login-client created successfully!"
---
# Patch login-v2-deployment with actual domain
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zitadel-login-v2
spec:
  template:
    spec:
      containers:
      - name: zitadel-login-v2
        env:
        - name: ZITADEL_ISSUER
          value: "https://sso.prplanit.com"
