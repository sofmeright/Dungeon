apiVersion: batch/v1
kind: Job
metadata:
  name: zitadel-setup
spec:
  backoffLimit: 5
  template:
    spec:
      restartPolicy: OnFailure
      serviceAccountName: zitadel
      initContainers:
      - name: wait-for-db
        image: PLACEHOLDER_KUBECTL_IMAGE
        command:
        - sh
        - -c
        - |
          echo "Waiting for init job to complete first..."
          until [ "$(kubectl get job zitadel-init -n PLACEHOLDER_NAMESPACE -o jsonpath='{.status.succeeded}' 2>/dev/null)" = "1" ]; do
            echo "Init job not complete yet, waiting..."
            sleep 5
          done
          echo "Init job completed! Setup can proceed."
      containers:
      - name: zitadel-setup
        image: PLACEHOLDER_IMAGE
        env:
        - name: ZITADEL_MASTERKEY
          valueFrom:
            secretKeyRef:
              name: zitadel-masterkey
              key: masterkey
        - name: ZITADEL_DATABASE_POSTGRES_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: zitadel-secrets
              key: ZITADEL_DATABASE_POSTGRES_USER_PASSWORD
        - name: ZITADEL_DATABASE_POSTGRES_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: zitadel-postgres-superuser
              key: password
        - name: ZITADEL_FIRSTINSTANCE_MACHINEKEYPATH
          value: "/machinekey/sa.json"
        - name: ZITADEL_FIRSTINSTANCE_PATPATH
          value: "/machinekey/pat"
        - name: ZITADEL_FIRSTINSTANCE_LOGINCLIENTPATPATH
          value: "/login-client/pat"
        command:
        - /app/zitadel
        - setup
        - --config
        - /config/zitadel-config.yaml
        - --masterkeyFromEnv
        - --init-projections=true
        volumeMounts:
        - name: zitadel-config
          mountPath: /config
          readOnly: true
        - name: machinekey
          mountPath: /machinekey
        - name: login-client
          mountPath: /login-client
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      - name: machinekey-writer
        image: PLACEHOLDER_KUBECTL_IMAGE
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        command:
        - sh
        - -c
        - |
          echo "Waiting for setup container to terminate..."
          until [ ! -z "$(kubectl get pod ${POD_NAME} -n PLACEHOLDER_NAMESPACE -o jsonpath="{.status.containerStatuses[?(@.name=='zitadel-setup')].state.terminated}" 2>/dev/null)" ]; do
            sleep 5
          done
          echo "Setup container terminated. Extracting sa.json..."
          kubectl create secret generic zitadel-admin-sa \
            --from-file=zitadel-admin-sa.json=/machinekey/sa.json \
            --dry-run=client -o yaml | kubectl apply -f -
          echo "Secret zitadel-admin-sa created successfully!"
        volumeMounts:
        - name: machinekey
          mountPath: /machinekey
          readOnly: true
      - name: machine-pat-writer
        image: PLACEHOLDER_KUBECTL_IMAGE
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        command:
        - sh
        - -c
        - |
          echo "Waiting for setup container to terminate..."
          until [ ! -z "$(kubectl get pod ${POD_NAME} -n PLACEHOLDER_NAMESPACE -o jsonpath="{.status.containerStatuses[?(@.name=='zitadel-setup')].state.terminated}" 2>/dev/null)" ]; do
            sleep 5
          done
          echo "Setup container terminated. Extracting PAT..."
          kubectl create secret generic zitadel-k8s-admin-sa \
            --from-file=pat=/machinekey/pat \
            --dry-run=client -o yaml | kubectl apply -f -
          echo "Secret zitadel-k8s-admin-sa created successfully!"
        volumeMounts:
        - name: machinekey
          mountPath: /machinekey
          readOnly: true
      - name: login-client-pat-writer
        image: PLACEHOLDER_KUBECTL_IMAGE
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        command:
        - sh
        - -c
        - |
          echo "Waiting for setup container to terminate..."
          until [ ! -z "$(kubectl get pod ${POD_NAME} -n PLACEHOLDER_NAMESPACE -o jsonpath="{.status.containerStatuses[?(@.name=='zitadel-setup')].state.terminated}" 2>/dev/null)" ]; do
            sleep 5
          done
          echo "Setup container terminated. Extracting login client PAT..."
          kubectl create secret generic zitadel-login-client \
            --from-file=pat=/login-client/pat \
            --dry-run=client -o yaml | kubectl apply -f -
          echo "Secret zitadel-login-client created successfully!"
        volumeMounts:
        - name: login-client
          mountPath: /login-client
          readOnly: true
      volumes:
      - name: zitadel-config
        configMap:
          name: zitadel-config
      - name: machinekey
        emptyDir: {}
      - name: login-client
        emptyDir: {}
