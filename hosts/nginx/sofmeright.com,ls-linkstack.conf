# This Server block is intended to redirect all HTTP requests to HTTPS.
server {
    listen   80;
    listen   [::]:80;
    server_name ls.operationtimecapsule.com ls.sofmeright.com ls.astralfocus.com;
    return 301 https://$server_name$request_uri;
}
# This Server block will listen for requests to initiate a SSL/HTTPS connection at port 443 and serve them to ls.operationtimecapsule.com ls.sofmeright.com ls.astralfocus.com.
server {
    # Directs the server to listen for IPv4 connections on port 443.
    listen                      443 ssl http2;
    # Directs the server to listen for IPv6 connections on port 443.
    listen                      [::]:443 ssl http2;
    # This line declares the domain name for the webservice.
    server_name                 ls.operationtimecapsule.com ls.sofmeright.com ls.astralfocus.com;
    # Path to the SSL keys used for the HTTPS encrypted sessions, generated by Certbot and LetsEncrypt 
    ssl_certificate             /etc/letsencrypt/live/sofmeright.com/fullchain.pem; # managed by Certbot
    # You can generate these keys with [sudo certbot --nginx -d "ls.operationtimecapsule.com, ls.sofmeright.com, ls.astralfocus.com"] Certbot will automatically renew the certs near expiry.
    ssl_certificate_key         /etc/letsencrypt/live/sofmeright.com/privkey.pem; # managed by Certbot
    # Logs are important for diagnosing issues and addressing security concerns. These lines enable access/error logging for the virtual host.
    access_log                  /var/log/nginx/ls.sofmeright.com-access.log;
    error_log                   /var/log/nginx/ls.sofmeright.com-error.log;
    # Encryption & Security Settings########################################################################################################################################################################|
    # Duration SSL session can be reused.                                                                                                                                                                  #|
    ssl_session_timeout         10m;                                                                                                                                                                       #|
    # Enables Session Caching, only can be declared once globally, most appropriate to declare in default site.                                                                                            #|
#####ssl_session_cache          shared:SSL:60m;                                                                                                                                                            #|
    # Declare SSL/TLS protocols used for secure connections. Only TLSv1.2 and TLSv1.3 are allowed for security reasons.                                                                                    #|
    ssl_protocols               TLSv1.2 TLSv1.3;                                                                                                                                                           #|
    # Prioritize ciphers declared in ssl_ciphers over ciphers preferred by the connecting client.                                                                                                          #|
    ssl_prefer_server_ciphers   on;                                                                                                                                                                        #|
    # Declares ciphers available to connecting clients. The strongest client-supported cipher that matches is used for the connection.                                                                     #|
    ssl_ciphers                 TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305;   #|
    # Path to Diffie-Hellman (dh)parameters file used for key exchange. Minimizes eavesdropping and security threats.                                                                                      #|
    # Use "sudo openssl dhparam -out /etc/nginx/dhparam.pem 4096" to generate. 4096-bit (stronger/slower), 2048-bit (weaker/faster).                                                                       #|
    ssl_dhparam                 /etc/nginx/dhparam.pem;                                                                                                                                                    #|
    # Specifies the elliptic curve Diffie-Hellman (ecdh) algorithm used for key exchange during the SSL handshake. This is for a 384-bit key length.                                                       #|
    ssl_ecdh_curve              secp384r1;                                                                                                                                                                 #|
    # Prevents MIME sniffing, an exploit attackers use to interpret files differently than intended and can be a security vulnerability.                                                                   #|
    add_header                  X-Content-Type-Options      nosniff;                                                                                                                                       #|
    # Denies iframe embedding to websites outside of the severs domain, to prevent against spoofing and clickjacking. But we want iframe!                                                                  #|
#####add_header                 X-Frame-Options             "SAMEORIGIN";                                                                                                                                  #|
    # Enforces browser HTTPS-only connections through strict transport security (STS) for a year (max-age=31536000). Protects against vulnerabilities of HTTP.                                             #|
    add_header                  Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;                                                                                           #|
    # Instructs the browser to enable its cross site-scripting (XSS) filter, and to block rendering of the page if malicious code is detected.                                                             #|
    add_header                  X-XSS-Protection            "1; mode=block";                                                                                                                               #|
    # Denies iframe embedding to any domains not listed, to prevent against clickjacking and spoofing attacks. You can allow iframe to addresses here! :)                                                  #|
    add_header                  Content-Security-Policy "frame-ancestors 'self' https://organizr.operationtimecapsule.com https://192.168.1.101:1661;";                                                    #|
    # Do not set Content-Security-Policy header as follows or scripts for formatting will not run.                                                                                                         #|
#####add_header                 Content-Security-Policy "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; font-src 'self';";                                   #|
    ########################################################################################################################################################################################################|

    location / {
    # Replace with the IP address and port number of your Docker container.
    proxy_pass                          https://10.30.8.98:40323;
    proxy_set_header Host               $host;
    proxy_set_header X-Real-IP          $remote_addr;

    proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto  https;
    proxy_set_header X-VerifiedViaNginx yes;
    proxy_read_timeout                  60;
    proxy_connect_timeout               60;
    proxy_redirect                      off;

    # Specific for websockets: force the use of HTTP/1.1 and set the Upgrade header
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_cache_bypass $http_upgrade;
    proxy_set_header X-Forwarded-Proto $scheme;

    # Fixes Mixed Content errors.
    add_header 'Content-Security-Policy' 'upgrade-insecure-requests';
  }

}
# This Server block will listen for requests to initiate a SSL/HTTPS connection at port 1662 and serve it internally at localhost.
server {
    # Directs the server to listen for IPv4 connections on port 1662.
    listen                      1662 ssl;
    # Directs the server to listen for IPv6 connections on port 1662.
    listen                      [::]:1662 ssl;
    # This line declares the domain name for the webservice.
    server_name                 localhost;
    # Path to the self-signed SSL keys used for the HTTPS encrypted sessions, generated by openssl (see command below); good for a year...
    ssl_certificate             /mnt/timecapsule/Server/fullchain.pem;
    # "sudo openssl req -nodes -x509 -new -keyout /media/timecapsule/Server/privkey.pem -out /media/timecapsule/Server/fullchain.pem -days 365 -subj "/C=US/ST=Washington/L=Tacoma/O=OperationTimeCapsule/OU=OTC/CN=localhost""
    ssl_certificate_key         /mnt/timecapsule/Server/privkey.pem;
    # Logs are important for diagnosing issues and addressing security concerns. These lines enable access/error logging for the virtual host.
    access_log                  /var/log/nginx/ls.localhost-access.log;
    error_log                   /var/log/nginx/ls.localhost-error.log;
    # Encryption & Security Settings########################################################################################################################################################################|
    # Duration SSL session can be reused.                                                                                                                                                                  #|
    ssl_session_timeout         10m;                                                                                                                                                                       #|
    # Enables Session Caching, only can be declared once globally, most appropriate to declare in default site.                                                                                            #|
#####ssl_session_cache          shared:SSL:60m;                                                                                                                                                            #|
    # Declare SSL/TLS protocols used for secure connections. Only TLSv1.2 and TLSv1.3 are allowed for security reasons.                                                                                    #|
    ssl_protocols               TLSv1.2 TLSv1.3;                                                                                                                                                           #|
    # Prioritize ciphers declared in ssl_ciphers over ciphers preferred by the connecting client.                                                                                                          #|
    ssl_prefer_server_ciphers   on;                                                                                                                                                                        #|
    # Declares ciphers available to connecting clients. The strongest client-supported cipher that matches is used for the connection.                                                                     #|
    ssl_ciphers                 TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305;   #|
    # Path to Diffie-Hellman (dh)parameters file used for key exchange. Minimizes eavesdropping and security threats.                                                                                      #|
    # Use "sudo openssl dhparam -out /etc/nginx/dhparam.pem 4096" to generate. 4096-bit (stronger/slower), 2048-bit (weaker/faster).                                                                       #|
    ssl_dhparam                 /etc/nginx/dhparam.pem;                                                                                                                                                    #|
    # Specifies the elliptic curve Diffie-Hellman (ecdh) algorithm used for key exchange during the SSL handshake. This is for a 384-bit key length.                                                       #|
    ssl_ecdh_curve              secp384r1;                                                                                                                                                                 #|
    # Prevents MIME sniffing, an exploit attackers use to interpret files differently than intended and can be a security vulnerability.                                                                   #|
    add_header                  X-Content-Type-Options      nosniff;                                                                                                                                       #|
    # Denies iframe embedding to websites outside of the severs domain, to prevent against spoofing and clickjacking. But we want iframe!                                                                  #|
#####add_header                 X-Frame-Options             "SAMEORIGIN";                                                                                                                                  #|
    # Enforces browser HTTPS-only connections through strict transport security (STS) for a year (max-age=31536000). Protects against vulnerabilities of HTTP.                                             #|
    add_header                  Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;                                                                                           #|
    # Instructs the browser to enable its cross site-scripting (XSS) filter, and to block rendering of the page if malicious code is detected.                                                             #|
    add_header                  X-XSS-Protection            "1; mode=block";                                                                                                                               #|
    # Denies iframe embedding to any domains not listed, to prevent against clickjacking and spoofing attacks. You can allow iframe to addresses here! :)                                                  #|
    add_header                  Content-Security-Policy "frame-ancestors 'self' https://organizr.operationtimecapsule.com https://192.168.1.101:1661;";                                                    #|
    # Do not set Content-Security-Policy header as follows or scripts for formatting will not run.                                                                                                         #|
#####add_header                 Content-Security-Policy "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; font-src 'self';";                                   #|
    ########################################################################################################################################################################################################|

    location / {
    # Replace with the IP address and port number of your Docker container.
    proxy_pass                          https://10.30.8.98:40323;
    proxy_set_header Host               $host;
    proxy_set_header X-Real-IP          $remote_addr;

    proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto  https;
    proxy_set_header X-VerifiedViaNginx yes;
    proxy_read_timeout                  60;
    proxy_connect_timeout               60;
    proxy_redirect                      off;

    # Specific for websockets: force the use of HTTP/1.1 and set the Upgrade header
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_cache_bypass $http_upgrade;
    proxy_set_header X-Forwarded-Proto $scheme;

    # Fixes Mixed Content errors.
    add_header 'Content-Security-Policy' 'upgrade-insecure-requests';
  }

}
