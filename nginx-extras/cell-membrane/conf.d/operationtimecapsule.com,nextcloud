# This Server block is intended to redirect all HTTP requests to HTTPS.
server {
    # Directs the server to listen for IPv4 connections on port 80.
    listen 80;
    # Directs the server to listen for IPv6 connections on port 80.
    listen [::]:80;
    # The enclosed lines redirect all HTTP requests to HTTPS.
    if ($host = nextcloud.operationtimecapsule.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot
    # This line declares the domain name for the webservice we will be redirecting.
    server_name nextcloud.operationtimecapsule.com;
    return 301 https://$host:443$request_uri;
    # Logs are important for diagnosing issues and addressing security concerns. These lines enable access/error logging for the virtual host.
    access_log                  /var/log/nginx/nextcloud.operationtimecapsule.com-access.log;
    error_log                   /var/log/nginx/nextcloud.operationtimecapsule.com-error.log;
}
# This Server block will listen for requests to initiate a SSL/HTTPS connection at port 443 and serve them to nextcloud.operationtimecapsule.com.
server {
    # Directs the server to listen for IPv4 connections on port 443.
    listen                      443 ssl http2;
    # Directs the server to listen for IPv6 connections on port 443.
    listen                      [::]:443 ssl http2;
    # This line declares the domain name for the webservice.
    server_name nextcloud.operationtimecapsule.com;
    # Path to the SSL keys used for the HTTPS encrypted sessions, generated by Certbot and LetsEncrypt 
    ssl_certificate /etc/letsencrypt/live/operationtimecapsule.com/fullchain.pem; # managed by Certbot
    # You can generate these keys with "sudo certbot --nginx -d nextcloud.operationtimecapsule.com" Certbot will automatically renew the certs near expiry.
    ssl_certificate_key /etc/letsencrypt/live/operationtimecapsule.com/privkey.pem; # managed by Certbot
    # Logs are important for diagnosing issues and addressing security concerns. These lines enable access/error logging for the virtual host.
    access_log                  /var/log/nginx/nextcloud.operationtimecapsule.com-access.log;
    error_log                   /var/log/nginx/nextcloud.operationtimecapsule.com-error.log;
    # Encryption & Security Settings########################################################################################################################################################################|
    # Duration SSL session can be reused.                                                                                                                                                                  #|
    ssl_session_timeout         10m;                                                                                                                                                                       #|
    # Enables Session Caching, only can be declared once globally, most appropriate to declare in default site.                                                                                            #|
#####ssl_session_cache          shared:SSL:60m;                                                                                                                                                            #|
    # Declare SSL/TLS protocols used for secure connections. Only TLSv1.2 and TLSv1.3 are allowed for security reasons.                                                                                    #|
    ssl_protocols               TLSv1.2 TLSv1.3;                                                                                                                                                           #|
    # Prioritize ciphers declared in ssl_ciphers over ciphers preferred by the connecting client.                                                                                                          #|
    ssl_prefer_server_ciphers   on;                                                                                                                                                                       #|
    # Declares ciphers available to connecting clients. The strongest client-supported cipher that matches is used for the connection.                                                                     #|
    ssl_ciphers                 TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305;   #|
    # Path to Diffie-Hellman (dh)parameters file used for key exchange. Minimizes eavesdropping and security threats.                                                                                      #|
    # Use "sudo openssl dhparam -out /etc/nginx/dhparam.pem 4096" to generate. 4096-bit (stronger/slower), 2048-bit (weaker/faster).                                                                       #|
    ssl_dhparam                 /etc/nginx/dhparam.pem;                                                                                                                                                    #|
    # Specifies the elliptic curve Diffie-Hellman (ecdh) algorithm used for key exchange during the SSL handshake. This is for a 384-bit key length.                                                       #|
    ssl_ecdh_curve              secp384r1;                                                                                                                                                                 #|
    # Prevents MIME sniffing, an exploit attackers use to interpret files differently than intended and can be a security vulnerability.                                                                   #|
    add_header                  X-Content-Type-Options      nosniff;                                                                                                                                       #|
    # Denies iframe embedding to websites outside of the severs domain, to prevent against spoofing and clickjacking. But we want iframe!                                                                  #|
#####add_header                 X-Frame-Options             "SAMEORIGIN";                                                                                                                                  #|
    # Enforces browser HTTPS-only connections through strict transport security (STS) for a year (max-age=31536000). Protects against vulnerabilities of HTTP.                                             #|
    # Nginx by default does not ship with more_set_headers; this is needed to override Nextclouds default frame-ancestors policy, to enable this directive you can use "sudo apt-get install nginx-extras".#|
    more_set_headers "Strict-Transport-Security: max-age=31536000; includeSubDomains; preload";                                                                                                            #|
    # Instructs the browser to enable its cross site-scripting (XSS) filter, and to block rendering of the page if malicious code is detected.                                                             #|
    add_header                  X-XSS-Protection            "1; mode=block";                                                                                                                               #|
    # Adding the following line can help lock down the Content-Security-Policy header to prevent unwanted iteration of scripts and code but can also stop important parts of the webservice from loading...#|
#####add_header Content-Security-Policy "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; font-src 'self';";                                                   #|
    # Denies iframe embedding to any domains not listed, to prevent against clickjacking and spoofing attacks. You can allow iframe to addresses here! :)                                                  #|
    more_set_headers "Content-Security-Policy: frame-ancestors 'self' https://organizr.operationtimecapsule.com https://192.168.1.101:1661;";                                                              #|
    ########################################################################################################################################################################################################|
    # Allow headers with underscores to be accepted and passed along to the backend server.
    underscores_in_headers on;
    location ~ {
        # Specifies the maximum file size that can be uploaded to the server, in megabytes (MB). 0 means no limit.
        client_max_body_size 0;
        # Sets the value of the Host header to the value of the HTTP Host header, which specifies the hostname and port number of the requested resource.
        proxy_set_header Host $http_host;
        # Logs the correct client IP for the upstream server by setting it in the X-Real-IP header.
        proxy_set_header X-Real-IP $remote_addr;
        # Forwards the client's IP address to the upstream server.
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # The X-Forwarded-Proto header informs the upstream server of which protocol is in use, either HTTP or HTTPS, for URL generation purposes.
        proxy_set_header X-Forwarded-Proto $scheme;
        # Sets a header to informs the upstream server that the request was made over HTTPS.
        add_header Front-End-Https on;
        # Sets the maximum size of the hash table used for storing request headers. Default: 512. If the number of headers exceeds the size of the hash table, Nginx will send an error message to the client.
        proxy_headers_hash_max_size 512;
        # Sets the bucket size of the hash table used to store headers that are passed to the upstream server via proxy.
        proxy_headers_hash_bucket_size 64;
        # Disables buffering of responses from the upstream server to improve performance.
        proxy_buffering off;
        # Disables proxy redirection.
        proxy_redirect off;
        # Sets maximum size of temporary files that can be created while reading a response from the upstream server. 0 indicates that no temporary files should be created.
        proxy_max_temp_file_size 0;
        # Specify the upstream server to which Nginx should proxy requests.
        proxy_pass http://10.30.1.123:81;
    }
    # The next two blocks expose Nextcloud's CardDAV and CALDAV servers.
    location /.well-known/carddav {
        return 301 $scheme://$host/remote.php/dav;
    }
    location /.well-known/caldav {
        return 301 $scheme://$host/remote.php/dav;
    }
}
# This server block exposes a local iFrame compatible instance of Nextcloud for use with organizr, etc.
server {
    # Directs the server to listen for IPv4 connections on port 8007.
    listen                      8007 ssl http2;
    # Directs the server to listen for IPv6 connections on port 443.
    listen                      [::]:8007 ssl http2;
    # This line declares the domain name for the webservice.
    server_name                 localhost;
    # Path to the self-signed SSL keys used for the HTTPS encrypted sessions, generated by openssl (see command below); good for a year...
    ssl_certificate             /mnt/timecapsule/Server/fullchain.pem;
    ssl_certificate_key         /mnt/timecapsule/Server/privkey.pem;
    # Logs are important for diagnosing issues and addressing security concerns. These lines enable access/error logging for the virtual host.
    access_log                  /var/log/nginx/nextcloud.localhost-access.log;
    error_log                   /var/log/nginx/nextcloud.localhost-error.log;
    # Encryption & Security Settings########################################################################################################################################################################|
    # Duration SSL session can be reused.                                                                                                                                                                  #|
    ssl_session_timeout         10m;                                                                                                                                                                       #|
    # Enables Session Caching, only can be declared once globally, most appropriate to declare in default site.                                                                                            #|
#####ssl_session_cache          shared:SSL:60m;                                                                                                                                                            #|
    # Declare SSL/TLS protocols used for secure connections. Only TLSv1.2 and TLSv1.3 are allowed for security reasons.                                                                                    #|
    ssl_protocols               TLSv1.2 TLSv1.3;                                                                                                                                                           #|
    # Prioritize ciphers declared in ssl_ciphers over ciphers preferred by the connecting client.                                                                                                          #|
    ssl_prefer_server_ciphers    on;                                                                                                                                                                       #|
    # Declares ciphers available to connecting clients. The strongest client-supported cipher that matches is used for the connection.                                                                     #|
    ssl_ciphers                 TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305;   #|
    # Path to Diffie-Hellman (dh)parameters file used for key exchange. Minimizes eavesdropping and security threats.                                                                                      #|
    # Use "sudo openssl dhparam -out /etc/nginx/dhparam.pem 4096" to generate. 4096-bit (stronger/slower), 2048-bit (weaker/faster).                                                                       #|
    ssl_dhparam                 /etc/nginx/dhparam.pem;                                                                                                                                                    #|
    # Specifies the elliptic curve Diffie-Hellman (ecdh) algorithm used for key exchange during the SSL handshake. This is for a 384-bit key length.                                                       #|
    ssl_ecdh_curve              secp384r1;                                                                                                                                                                 #|
    # Prevents MIME sniffing, an exploit attackers use to interpret files differently than intended and can be a security vulnerability.                                                                   #|
    add_header                  X-Content-Type-Options      nosniff;                                                                                                                                       #|
    # Denies iframe embedding to websites outside of the severs domain, to prevent against spoofing and clickjacking. But we want iframe!                                                                  #|
#####add_header                 X-Frame-Options             "SAMEORIGIN";                                                                                                                                  #|
    # Enforces browser HTTPS-only connections through strict transport security (STS) for a year (max-age=31536000). Protects against vulnerabilities of HTTP.                                             #|
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;                                                                                                            #|
    # Instructs the browser to enable its cross site-scripting (XSS) filter, and to block rendering of the page if malicious code is detected.                                                             #|
    add_header                  X-XSS-Protection            "1; mode=block";                                                                                                                               #|
    # Adding the following line can help lock down the Content-Security-Policy header to prevent unwanted iteration of scripts and code but can also stop important parts of the webservice from loading...#|
#####add_header Content-Security-Policy "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; font-src 'self';";                                                   #|
    # Denies iframe embedding to any domains not listed, to prevent against clickjacking and spoofing attacks. You can allow iframe to addresses here! :)                                                  #|
    # Nginx by default does not ship with more_set_headers; this is needed to override Nextclouds default frame-ancestors policy, to enable this directive you can use "sudo apt-get install nginx-extras".#|
    more_set_headers "Content-Security-Policy: frame-ancestors 'self' https://192.168.1.101:1661;";                                                                                                        #|
    ########################################################################################################################################################################################################|
    # Allow headers with underscores to be accepted and passed along to the backend server.
    underscores_in_headers on;
    location ~ {
        # Specify the upstream server to which Nginx should proxy requests.
        proxy_pass http://10.30.1.123:81;
        # Specifies the maximum file size that can be uploaded to the server, in megabytes (MB). 0 means no limit.
        client_max_body_size 0;
        # Sets the value of the Host header to the value of the HTTP Host header, which specifies the hostname and port number of the requested resource.
        proxy_set_header Host $http_host;
        # Logs the correct client IP for the upstream server by setting it in the X-Real-IP header.
        proxy_set_header X-Real-IP $remote_addr;
        # Forwards the client's IP address to the upstream server.
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # The X-Forwarded-Proto header informs the upstream server of which protocol is in use, either HTTP or HTTPS, for URL generation purposes.
        proxy_set_header X-Forwarded-Proto $scheme;
        # This header informs the backend server whether the original request was made over HTTP/HTTPS.
        proxy_set_header X-Scheme "https";
        # Sets the maximum size of the hash table used for storing request headers. Default: 512. If the number of headers exceeds the size of the hash table, Nginx will send an error message to the client.
        proxy_headers_hash_max_size 512;
        # Sets the bucket size of the hash table used to store headers that are passed to the upstream server via proxy.
        proxy_headers_hash_bucket_size 64;
        # Disables buffering of responses from the upstream server to improve performance.
        proxy_buffering off;
        # Disables proxy redirection.
        proxy_redirect off;
        # Sets maximum size of temporary files that can be created while reading a response from the upstream server. 0 indicates that no temporary files should be created.
        proxy_max_temp_file_size 0;
    }
    # The next two blocks expose Nextcloud's CardDAV and CALDAV servers.
    location /.well-known/carddav {
        return 301 $scheme://$host/remote.php/dav;
    }
    location /.well-known/caldav {
        return 301 $scheme://$host/remote.php/dav;
    }
}
