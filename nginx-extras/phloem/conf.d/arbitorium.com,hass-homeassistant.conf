# The enclosed lines map HTTP upgrades to WebSocket upgrades for incoming client requests. They are used for WebSocket connections.
map $http_upgrade $connection_upgrade {
    default    upgrade;
    '' close;
}
# This Server block is intended to redirect all HTTP requests to HTTPS.
server {
    # Directs the server to listen for IPv4 connections on port 80.
    listen                      80;
    # Directs the server to listen for IPv6 connections on port 80.
    listen                      [::]:80;
    # The enclosed lines redirect all HTTP requests to HTTPS.
    if ($host = hass.arbitorium.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot
    # This line declares the domain name for the webservice we will be redirecting.
    server_name                 hass.arbitorium.com;
    # Logs are important for diagnosing issues and addressing security concerns. These lines enable access/error logging for the virtual host.
    access_log                  /var/log/nginx/hass.arbitorium.com-access.log;
    error_log                   /var/log/nginx/hass.arbitorium.com-error.log;
}
# This Server block will listen for requests to initiate a SSL/HTTPS connection at port 443 and serve them to hass.arbitorium.com.
server {
    # Directs the server to listen for IPv4 connections on port 443.
    listen                      443 ssl http2;
    # Directs the server to listen for IPv6 connections on port 443.
    listen                      [::]:443 ssl http2;
    # This line declares the domain name for the webservice.
    server_name                 hass.arbitorium.com;
    # Path to the SSL keys used for the HTTPS encrypted sessions, generated by Certbot and LetsEncrypt 
    ssl_certificate             /etc/letsencrypt/live/arbitorium.com/fullchain.pem; # managed by Certbot
    # You can generate these keys with "sudo certbot --nginx -d hass.arbitorium.com" Certbot will automatically renew the certs near expiry.
    ssl_certificate_key         /etc/letsencrypt/live/arbitorium.com/privkey.pem; # managed by Certbot
    # Logs are important for diagnosing issues and addressing security concerns. These lines enable access/error logging for the virtual host.
    access_log                  /var/log/nginx/hass.arbitorium.com-access.log;
    error_log                   /var/log/nginx/hass.arbitorium.com-error.log;
    # Encryption & Security Settings########################################################################################################################################################################|
    # Duration SSL session can be reused.                                                                                                                                                                  #|
    ssl_session_timeout         10m;                                                                                                                                                                       #|
    # Enables Session Caching, only can be declared once globally, most appropriate to declare in default site.                                                                                            #|
#####ssl_session_cache          shared:SSL:60m;                                                                                                                                                            #|
    # Declare SSL/TLS protocols used for secure connections. Only TLSv1.2 and TLSv1.3 are allowed for security reasons.                                                                                    #|
    ssl_protocols               TLSv1.2 TLSv1.3;                                                                                                                                                           #|
    # Prioritize ciphers declared in ssl_ciphers over ciphers preferred by the connecting client.                                                                                                          #|
    ssl_prefer_server_ciphers    on;                                                                                                                                                                       #|
    # Declares ciphers available to connecting clients. The strongest client-supported cipher that matches is used for the connection.                                                                     #|
    ssl_ciphers                 TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305;   #|
    # Path to Diffie-Hellman (dh)parameters file used for key exchange. Minimizes eavesdropping and security threats.                                                                                      #|
    # Use "sudo openssl dhparam -out /etc/nginx/dhparam.pem 4096" to generate. 4096-bit (stronger/slower), 2048-bit (weaker/faster).                                                                       #|
    ssl_dhparam                 /etc/nginx/dhparam.pem;                                                                                                                                                    #|
    # Specifies the elliptic curve Diffie-Hellman (ecdh) algorithm used for key exchange during the SSL handshake. This is for a 384-bit key length.                                                       #|
    ssl_ecdh_curve              secp384r1;                                                                                                                                                                 #|
    # Prevents MIME sniffing, an exploit attackers use to interpret files differently than intended and can be a security vulnerability.                                                                   #|
    add_header                  X-Content-Type-Options      nosniff;                                                                                                                                       #|
    # Denies iframe embedding to websites outside of the severs domain, to prevent against spoofing and clickjacking. But we want iframe!                                                                  #|
#####add_header                 X-Frame-Options             "SAMEORIGIN";                                                                                                                                  #|
    # Enforces browser HTTPS-only connections through strict transport security (STS) for a year (max-age=31536000). Protects against vulnerabilities of HTTP.                                             #|
    add_header                  Strict-Transport-Security   "max-age=31536000";                                                                                                                            #|
    # Instructs the browser to enable its cross site-scripting (XSS) filter, and to block rendering of the page if malicious code is detected.                                                             #|
    add_header                  X-XSS-Protection            "1; mode=block";                                                                                                                               #|
    # Denies iframe embedding to any domains not listed, to prevent against clickjacking and spoofing attacks. You can allow iframe to addresses here! :)                                                  #|
    add_header                  Content-Security-Policy     "frame-ancestors 'self' https://organizr.arbitorium.com/;";                                                                          #|
    ########################################################################################################################################################################################################|
    # Disables buffering of responses from proxied server to deliver them to the client as soon as possible, which can improve performance and reduce latency.
    proxy_buffering off;
    # Sets the HTTP version to 1.1, which is the most commonly used version for HTTP today. Client compatibility is essential.
    proxy_http_version          1.1;
    # This header specifies the hostname of the target resource that is requested.
    proxy_set_header            Host                        $host;
    # Forwards the client's IP address to the upstream server.
    proxy_set_header            X-Forwarded-For             $proxy_add_x_forwarded_for;
    # Logs the correct client IP for the upstream server by setting it in the X-Real-IP header.
    proxy_set_header            X-Real-IP                   $remote_addr;
    # This line upgrades the connection to WebSocket if requested by the client.
    proxy_set_header            Connection                  $connection_upgrade;
    # This configuration line tells the upstream server to upgrade the connection to WebSocket if possible.
    proxy_set_header            Upgrade                     $http_upgrade;
    location / {
        # Specify the upstream server to which Nginx should proxy requests. 
        proxy_pass              http://10.55.6.149:8123;
    }
    location /api/websocket {
        # Specify the upstream (websocket) server to which Nginx should proxy requests. 
        proxy_pass              http://10.55.6.149:8123/api/websocket;
    }
}
# Duplicate of the 443 server block. SSL/HTTPS is necessary to comply with all vendors Security-Policies for iFrame (for organizr). It listens for SSL/HTTPS requests on port 1663 and serves them to localhost.
server {
    # Directs the server to listen for IPv4 connections on port 1663.
    listen                      1663 ssl http2;
    # Directs the server to listen for IPv6 connections on port 1663.
    listen                      [::]:1663 ssl http2;
    # This line declares the domain name for the webservice.
    server_name                 localhost;
    # Path to the self-signed SSL keys used for the HTTPS encrypted sessions, generated by openssl (see command below); good for a year...
    ssl_certificate /etc/letsencrypt/live/localhost/fullchain.pem;
    # "sudo openssl req -nodes -x509 -new -keyout /media/timecapsule/Server/privkey.pem -out /media/timecapsule/Server/fullchain.pem -days 365 -subj "/C=US/ST=Washington/L=Tacoma/O=OperationTimeCapsule/OU=OTC/CN=localhost""
    ssl_certificate_key /etc/letsencrypt/live/localhost/privkey.pem;
    # Logs are important for diagnosing issues and addressing security concerns. These lines enable access/error logging for the virtual host.
    access_log                  /var/log/nginx/hass.localhost-access.log;
    error_log                   /var/log/nginx/hass.localhost-error.log;
    # Logs are important for diagnosing issues and addressing security concerns. These lines enable access/error logging for the virtual host.
    access_log                  /var/log/nginx/hass.domain.com-access.log;
    error_log                   /var/log/nginx/hass.domain.com-error.log;
    # Encryption & Security Settings
    # ---------------------------------------------------------------------
    # Duration SSL session can be reused.
    ssl_session_timeout         10m;
    # Enables Session Caching, only can be declared once globally, most appropriate to declare in default site.
#####ssl_session_cache            shared:SSL:60m;
    # Declare SSL/TLS protocols used for secure connections. Only TLSv1.2 and TLSv1.3 are allowed for security reasons.
    ssl_protocols               TLSv1.2 TLSv1.3;
    # Prioritize ciphers declared in ssl_ciphers over ciphers preferred by the connecting client.
    ssl_prefer_server_ciphers   on;
    # Declares ciphers available to connecting clients. The strongest client-supported cipher that matches is used for the connection.
    ssl_ciphers                 TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305;
    # Path to Diffie-Hellman (dh)parameters file used for key exchange. Minimizes eavesdropping and security threats.
    # Use "sudo openssl dhparam -out /etc/nginx/dhparam.pem 4096" to generate. 4096-bit (stronger/slower), 2048-bit (weaker/faster).
    ssl_dhparam                 /etc/nginx/dhparam.pem;
    # Specifies the elliptic curve Diffie-Hellman (ecdh) algorithm used for key exchange during the SSL handshake. This is for a 384-bit key length.
    ssl_ecdh_curve              secp384r1;
    # Prevents MIME sniffing, an exploit attackers use to interpret files differently than intended and can be a security vulnerability.
    add_header                  X-Content-Type-Options      nosniff;
    # Denies iframe embedding to websites outside of the severs domain, to prevent against spoofing and clickjacking. But we want iframe!
#####add_header                    X-Frame-Options          "SAMEORIGIN";
    # Enforces browser HTTPS-only connections through strict transport security (STS) for a year (max-age=31536000). Protects against vulnerabilities of HTTP.
    add_header                  Strict-Transport-Security   "max-age=31536000";
    # Instructs the browser to enable its cross site-scripting (XSS) filter, and to block rendering of the page if malicious code is detected.
    add_header                  X-XSS-Protection            "1; mode=block";
    # Denies iframe embedding to any domains not listed, to prevent against clickjacking and spoofing attacks. You can allow iframe to addresses here! :)
    add_header                  Content-Security-Policy     "frame-ancestors 'self' https://172.55.6.123:1661;";
    # ---------------------------------------------------------------------
    # Disables buffering of responses from proxied server to deliver them to the client as soon as possible, which can improve performance and reduce latency.
    proxy_buffering off;
    # Sets the HTTP version to 1.1, which is the most commonly used version for HTTP today. Client compatibility is essential.
    proxy_http_version          1.1;
    # This header specifies the hostname of the target resource that is requested.
    proxy_set_header            Host                        $host;
    # Forwards the client's IP address to the upstream server.
    proxy_set_header            X-Forwarded-For             $proxy_add_x_forwarded_for;
    # Logs the correct client IP for the upstream server by setting it in the X-Real-IP header.
    proxy_set_header            X-Real-IP                   $remote_addr;
    # This line upgrades the connection to WebSocket if requested by the client.
    proxy_set_header            Connection                  $connection_upgrade;
    # This configuration line tells the upstream server to upgrade the connection to WebSocket if possible.
    proxy_set_header            Upgrade                     $http_upgrade;
    location / {
        # Specify the upstream server to which Nginx should proxy requests. 
        proxy_pass              http://10.55.6.149:8123;
    }
    location /api/websocket {
        # Specify the upstream (websocket) server to which Nginx should proxy requests. 
        proxy_pass              http://10.55.6.149:8123/api/websocket;
    }
    location /_error_pages {
        alias /mnt/timecapsule/Server/Web-App/NGINX/_error_pages/;
        try_files $uri $uri/ =404;
    } 
  
    error_page 400 /403.html;
    error_page 401 /403.html;
    error_page 402 /403.html;
    error_page 403 /403.html;
    error_page 404 /404.html;
    error_page 405 /404.html;
    error_page 406 /404.html;
    location = /400.html { root  /mnt/timecapsule/Server/Web-App/NGINX/_error_pages/back2thefuture; }
    location = /401.html { root  /mnt/timecapsule/Server/Web-App/NGINX/_error_pages/back2thefuture; }
    location = /402.html { root  /mnt/timecapsule/Server/Web-App/NGINX/_error_pages/back2thefuture; }
    location = /403.html { root  /mnt/timecapsule/Server/Web-App/NGINX/_error_pages/back2thefuture; }
    location = /404.html { root  /mnt/timecapsule/Server/Web-App/NGINX/_error_pages/back2thefuture; }
    location = /405.html { root  /mnt/timecapsule/Server/Web-App/NGINX/_error_pages/back2thefuture; }
    location = /406.html { root  /mnt/timecapsule/Server/Web-App/NGINX/_error_pages/back2thefuture; }
}
