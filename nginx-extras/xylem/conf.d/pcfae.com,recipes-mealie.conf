server {
    if ($host = recipes.pcfae.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    listen 80;
    server_name recipes.pcfae.com;
    return 301 https://$server_name$request_uri;


}

server {
    listen 443 ssl http2;
    server_name recipes.pcfae.com;

    ssl_certificate /etc/letsencrypt/live/pcfae.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/pcfae.com/privkey.pem; # managed by Certbot

    proxy_set_header Referer $http_referer;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Real-Port $remote_port;
    proxy_set_header X-Forwarded-Host $host:$remote_port;
    proxy_set_header X-Forwarded-Server $host;
    proxy_set_header X-Forwarded-Port $remote_port;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Ssl on;

    location / {
        # Specify the upstream server to which Nginx should proxy requests.
        proxy_pass http://10.30.8.98:9926;
        # Specifies the maximum file size that can be uploaded to the server, in megabytes (MB). 0 means no limit.
        client_max_body_size 0;
        # Sets the value of the Host header to the value of the HTTP Host header, which specifies the hostname and port number of the requested resource.
        proxy_set_header Host $http_host;
        # Logs the correct client IP for the upstream server by setting it in the X-Real-IP header.
        proxy_set_header X-Real-IP $remote_addr;
        # Forwards the client's IP address to the upstream server.
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # The X-Forwarded-Proto header informs the upstream server of which protocol is in use, either HTTP or HTTPS, for URL generation purposes.
        proxy_set_header X-Forwarded-Proto $scheme;
        # This header informs the backend server whether the original request was made over HTTP/HTTPS.
        proxy_set_header X-Scheme "https";
        # Sets the maximum size of the hash table used for storing request headers. Default: 512. If the number of headers exceeds the size of the hash table, Nginx will send an error message to the client.
        proxy_headers_hash_max_size 512;
        # Sets the bucket size of the hash table used to store headers that are passed to the upstream server via proxy.
        proxy_headers_hash_bucket_size 64;
        # Disables buffering of responses from the upstream server to improve performance.
        proxy_buffering off;
        # Disables proxy redirection.
        proxy_redirect off;
        # Sets maximum size of temporary files that can be created while reading a response from the upstream server. 0 indicates that no temporary files should be created.
        proxy_max_temp_file_size 0;
    }
    location /_error_pages {
        alias /mnt/timecapsule/Server/Web-App/NGINX/_error_pages/;
        try_files $uri $uri/ =404;
    } 
  
    error_page 400 /403.html;
    error_page 401 /403.html;
    error_page 402 /403.html;
    error_page 403 /403.html;
    error_page 404 /404.html;
    error_page 405 /404.html;
    error_page 406 /404.html;
    location = /400.html { root  /mnt/timecapsule/Server/Web-App/NGINX/_error_pages/back2thefuture; }
    location = /401.html { root  /mnt/timecapsule/Server/Web-App/NGINX/_error_pages/back2thefuture; }
    location = /402.html { root  /mnt/timecapsule/Server/Web-App/NGINX/_error_pages/back2thefuture; }
    location = /403.html { root  /mnt/timecapsule/Server/Web-App/NGINX/_error_pages/back2thefuture; }
    location = /404.html { root  /mnt/timecapsule/Server/Web-App/NGINX/_error_pages/back2thefuture; }
    location = /405.html { root  /mnt/timecapsule/Server/Web-App/NGINX/_error_pages/back2thefuture; }
    location = /406.html { root  /mnt/timecapsule/Server/Web-App/NGINX/_error_pages/back2thefuture; }

}
